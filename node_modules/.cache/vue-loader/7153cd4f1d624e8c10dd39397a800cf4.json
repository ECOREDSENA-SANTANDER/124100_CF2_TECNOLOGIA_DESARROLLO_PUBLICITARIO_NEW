{"remainingRequest":"/home/runner/work/124100_CF2_TECNOLOGIA_DESARROLLO_PUBLICITARIO_NEW/124100_CF2_TECNOLOGIA_DESARROLLO_PUBLICITARIO_NEW/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/124100_CF2_TECNOLOGIA_DESARROLLO_PUBLICITARIO_NEW/124100_CF2_TECNOLOGIA_DESARROLLO_PUBLICITARIO_NEW/src/views/Tema2.vue?vue&type=template&id=0b83e793&lang=pug","dependencies":[{"path":"/home/runner/work/124100_CF2_TECNOLOGIA_DESARROLLO_PUBLICITARIO_NEW/124100_CF2_TECNOLOGIA_DESARROLLO_PUBLICITARIO_NEW/src/views/Tema2.vue","mtime":1741287869604},{"path":"/home/runner/work/124100_CF2_TECNOLOGIA_DESARROLLO_PUBLICITARIO_NEW/124100_CF2_TECNOLOGIA_DESARROLLO_PUBLICITARIO_NEW/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/124100_CF2_TECNOLOGIA_DESARROLLO_PUBLICITARIO_NEW/124100_CF2_TECNOLOGIA_DESARROLLO_PUBLICITARIO_NEW/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/124100_CF2_TECNOLOGIA_DESARROLLO_PUBLICITARIO_NEW/124100_CF2_TECNOLOGIA_DESARROLLO_PUBLICITARIO_NEW/node_modules/babel-loader/lib/index.js","mtime":456789000000},{"path":"/home/runner/work/124100_CF2_TECNOLOGIA_DESARROLLO_PUBLICITARIO_NEW/124100_CF2_TECNOLOGIA_DESARROLLO_PUBLICITARIO_NEW/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/124100_CF2_TECNOLOGIA_DESARROLLO_PUBLICITARIO_NEW/124100_CF2_TECNOLOGIA_DESARROLLO_PUBLICITARIO_NEW/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/124100_CF2_TECNOLOGIA_DESARROLLO_PUBLICITARIO_NEW/124100_CF2_TECNOLOGIA_DESARROLLO_PUBLICITARIO_NEW/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/124100_CF2_TECNOLOGIA_DESARROLLO_PUBLICITARIO_NEW/124100_CF2_TECNOLOGIA_DESARROLLO_PUBLICITARIO_NEW/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}